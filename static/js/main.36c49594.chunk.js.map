{"version":3,"sources":["components/navbar.component.js","components/stocks.component.js","components/create-user.component.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Component","Stock","props","stock","username","ticker","date","substring","_id","href","onClick","deleteStock","exercise","StocksList","bind","state","stocks","axios","get","then","response","setState","data","catch","error","console","log","id","delete","this","filter","el","map","currentstock","deleteStocks","key","StockList","CreateUser","onChangeUsername","onSubmit","e","target","value","preventDefault","user","post","res","type","required","onChange","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.36c49594.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Navbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\r\n        <Link to=\"/\" className=\"navbar-brand\">Super Stonks</Link>\r\n        <div className=\"collpase navbar-collapse\">\r\n        <ul className=\"navbar-nav mr-auto\">\r\n          <li className=\"navbar-item\">\r\n          <Link to=\"/\" className=\"nav-link\">Stocks</Link>\r\n          </li>\r\n          <li className=\"navbar-item\">\r\n          <Link to=\"/create\" className=\"nav-link\">Users</Link>\r\n          </li>\r\n        </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}","\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst Stock = props => (\r\n  <tr>\r\n    <td>{props.stock.username}</td>\r\n    <td>{props.stock.ticker}</td>\r\n    <td>{props.stock.date.substring(0,10)}</td>\r\n    <td>\r\n      <Link to={\"/edit/\"+props.stock._id}>edit</Link> | <a href=\"#\" onClick={() => { props.deleteStock(props.exercise._id) }}>delete</a>\r\n    </td>\r\n  </tr>\r\n)\r\n\r\nexport default class StocksList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.deleteStock = this.deleteStock.bind(this)\r\n\r\n    this.state = {stocks: []};\r\n  }\r\n\r\n  componentDidMount() {\r\n    axios.get('http://localhost:5000/stocks/')\r\n      .then(response => {\r\n        this.setState({ stocks: response.data })\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n  deleteStock(id) {\r\n    axios.delete('http://localhost:5000/stocks/'+id)\r\n      .then(response => { console.log(response.data)});\r\n\r\n    this.setState({\r\n      stocks: this.state.stocks.filter(el => el._id !== id)\r\n    })\r\n  }\r\n\r\n  StockList() {\r\n    return this.state.stocks.map(currentstock => {\r\n      return <Stock stock={currentstock} deleteStocks={this.deleteStocks} key={currentstock._id}/>;\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Portfolio</h3>\r\n        <table className=\"table\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n              <th>Ticker</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            { this.StockList() }\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class CreateUser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.state = {\r\n      username: ''\r\n    }\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value\r\n    })\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const user = {\r\n      username: this.state.username\r\n    }\r\n\r\n    console.log(user);\r\n\r\n    axios.post('http://localhost:5000/users/add', user)\r\n      .then(res => console.log(res.data));\r\n\r\n    this.setState({\r\n      username: ''\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Create New User</h3>\r\n        <form onSubmit={this.onSubmit}>\r\n          <div className=\"form-group\"> \r\n            <label>Username: </label>\r\n            <input  type=\"text\"\r\n                required\r\n                className=\"form-control\"\r\n                value={this.state.username}\r\n                onChange={this.onChangeUsername}\r\n                />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input type=\"submit\" value=\"Create User\" className=\"btn btn-primary\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\n\nimport Navbar from \"./components/navbar.component\"\nimport StocksList from './components/stocks.component';\nimport CreateUser from './components/create-user.component';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n      <Navbar />\n      <br/>\n      <Route path =\"/stocks\" component={StocksList} />\n      <Route path =\"/create\" component={CreateUser} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}